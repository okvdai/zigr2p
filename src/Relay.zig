const squirrel = @import("squirrel.zig");
const std = @import("std");
const HMODULE = std.os.windows.HMODULE;

const Self = @This();
register: *const fn (sqvm: *squirrel.VM, func: squirrel.SQFunc, bUnknown: u8) void,

pushroottable: *const fn (sqvm: *squirrel.VM) *anyopaque,
pushstring: *const fn (sqvm: *squirrel.VM, str: *[*:0]const u8, length: c_long) *anyopaque,
pushinteger: *const fn (sqvm: *squirrel.VM, integer: c_long) *anyopaque,
pushfloat: *const fn (sqvm: *squirrel.VM, float: f32) *anyopaque,
pushbool: *const fn (sqvm: *squirrel.VM, bool: c_ulong) *anyopaque,
pushasset: *const fn (sqvm: *squirrel.VM, str: *[*:0]const u8, length: c_long) *anyopaque,
pushvector: *const fn (sqvm: *squirrel.VM, vector: f32) *anyopaque,
pushobject: *const fn (sqvm: *squirrel.VM, obj: squirrel.SQObj) *anyopaque,

getstring: *const fn (sqvm: *squirrel.VM, stackpos: c_long) *[*:0]const u8,
getinteger: *const fn (sqvm: *squirrel.VM, stackpos: c_long) c_long,
getfloat: *const fn (sqvm: *squirrel.VM, stackpos: c_long) f32,
getbool: *const fn (sqvm: *squirrel.VM, stackpos: c_long) c_ulong,
getasset: *const fn (sqvm: *squirrel.VM, stackpos: c_long, out: *[*:0]const u8) squirrel.Result,
getvector: *const fn (sqvm: *squirrel.VM, stackpos: c_long) f32,
getthisentity: *const fn (sqvm: *squirrel.VM, ent: *anyopaque) c_ulong,
getobject: *const fn (sqvm: *squirrel.VM, stackpos: c_long, out: *squirrel.SQObj) *anyopaque,
getfunction: *const fn (sqvm: *squirrel.VM, stackpos: c_long) squirrel.Result,
getuserdata: *const fn (sqvm: *squirrel.VM, stackpos: c_long, data: *anyopaque, tag: *i64) squirrel.Result,
get: *const fn (sqvm: *squirrel.VM, stackpos: c_long) squirrel.Result,

newarray: *const fn (sqvm: *squirrel.VM, size: c_ulong) *anyopaque,
arrayappend: *const fn (sqvm: *squirrel.VM, stackpos: c_long) squirrel.Result,
newtable: *const fn (sqvm: *squirrel.VM) squirrel.Result,
newslot: *const fn (sqvm: *squirrel.VM, stackpos: c_long, bStatic: c_ulong) squirrel.Result,
newstruct: *const fn (sqvm: *squirrel.VM, size: c_ulong) squirrel.Result,
setmember: *const fn (sqvm: *squirrel.VM, memberIndex: c_ulong) squirrel.Result,

createuserdata: *const fn (sqvm: *squirrel.VM, size: c_ulong) *anyopaque,
setuserdatatypetag: *const fn (sqvm: *squirrel.VM, stackpos: c_long, typeID: i64) squirrel.Result,

stackinfos: *const fn (sqvm: *squirrel.VM, stackpos: c_long, out: *anyopaque) *anyopaque,
compilebuffer: *const fn (sqvm: *squirrel.VM, buffer: *anyopaque, file: *[*:0]const u8, unk: c_int, bShouldThrowError: c_ulong) squirrel.Result,
call: *const fn (sqvm: *squirrel.VM, nArgs: c_ulong, bShouldReturn: c_ulong, bShouldThrowError: c_ulong) squirrel.Result,
raiseerror: *const fn (sqvm: *squirrel.VM, err: *[*:0]const u8) c_long,

pub fn New(ctx: squirrel.Ctx, module: HMODULE) Self {
    const base = @intFromPtr(module);
    return switch (ctx) {
        squirrel.Ctx.client, squirrel.Ctx.ui => Self{
            .register = @ptrFromInt(base + 0x108E0),
            .pushroottable = @ptrFromInt(base + 0x5860),
            .pushstring = @ptrFromInt(base + 0x3440),
            .pushinteger = @ptrFromInt(base + 0x36A0),
            .pushfloat = @ptrFromInt(base + 0x3800),
            .pushbool = @ptrFromInt(base + 0x3710),
            .pushasset = @ptrFromInt(base + 0x3560),
            .pushvector = @ptrFromInt(base + 0x3780),
            .pushobject = @ptrFromInt(base + 0x83D0),
            .getstring = @ptrFromInt(base + 0x60C0),
            .getinteger = @ptrFromInt(base + 0x60E0),
            .getfloat = @ptrFromInt(base + 0x61100),
            .getbool = @ptrFromInt(base + 0x6130),
            .getasset = @ptrFromInt(base + 0x6010),
            .getvector = @ptrFromInt(base + 0x6140),
            .getthisentity = @ptrFromInt(base + 0x12F80),
            .getobject = @ptrFromInt(base + 0x6160),
            .getfunction = @ptrFromInt(base + 0x6CB0),
            .getuserdata = @ptrFromInt(base + 0x63D0),
            .get = @ptrFromInt(base + 0x7C30),
            .newarray = @ptrFromInt(base + 0x39F0),
            .arrayappend = @ptrFromInt(base + 0x3C70),
            .newtable = @ptrFromInt(base + 0x3960),
            .newslot = @ptrFromInt(base + 0x70B0),
            .newstruct = @ptrFromInt(base + 0x5400),
            .setmember = @ptrFromInt(base + 0x5530),
            .createuserdata = @ptrFromInt(base + 0x38D0),
            .setuserdatatypetag = @ptrFromInt(base + 0x6490),
            .stackinfos = @ptrFromInt(base + 0x35970),
            .compilebuffer = @ptrFromInt(base + 0x3110),
            .call = @ptrFromInt(base + 0x8650),
            .raiseerror = @ptrFromInt(base + 0x8740),
        },
        squirrel.Ctx.server => Self{
            .register = @ptrFromInt(base + 0x1DD10),
            .pushroottable = @ptrFromInt(base + 0x5840),
            .pushstring = @ptrFromInt(base + 0x3440),
            .pushinteger = @ptrFromInt(base + 0x36A0),
            .pushfloat = @ptrFromInt(base + 0x3800),
            .pushbool = @ptrFromInt(base + 0x3710),
            .pushasset = @ptrFromInt(base + 0x3560),
            .pushvector = @ptrFromInt(base + 0x3780),
            .pushobject = @ptrFromInt(base + 0x83A0),
            .getstring = @ptrFromInt(base + 0x60A0),
            .getinteger = @ptrFromInt(base + 0x60C0),
            .getfloat = @ptrFromInt(base + 0x60E0),
            .getbool = @ptrFromInt(base + 0x6110),
            .getasset = @ptrFromInt(base + 0x5FF0),
            .getvector = @ptrFromInt(base + 0x6120),
            .getthisentity = @ptrFromInt(base + 0x203B0),
            .getobject = @ptrFromInt(base + 0x6140),
            .getfunction = @ptrFromInt(base + 0x6C80),
            .getuserdata = @ptrFromInt(base + 0x63B0),
            .get = @ptrFromInt(base + 0x7C00),
            .newarray = @ptrFromInt(base + 0x39F0),
            .arrayappend = @ptrFromInt(base + 0x3C70),
            .newtable = @ptrFromInt(base + 0x3960),
            .newslot = @ptrFromInt(base + 0x70B0),
            .newstruct = @ptrFromInt(base + 0x53E0),
            .setmember = @ptrFromInt(base + 0x5510),
            .createuserdata = @ptrFromInt(base + 0x38D0),
            .setuserdatatypetag = @ptrFromInt(base + 0x6470),
            .stackinfos = @ptrFromInt(base + 0x35920),
            .compilebuffer = @ptrFromInt(base + 0x3110),
            .call = @ptrFromInt(base + 0x8620),
            .raiseerror = @ptrFromInt(base + 0x8440),
        },
        else => @panic("unknown ctx"),
    };
}
